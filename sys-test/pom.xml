<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>de.cpoepke.mule.demo</groupId>
  <artifactId>sys-test</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>System Test - Mule End to End Test Demo</name>
  <description>System Test of the Mule End to End Test Demo</description>

  <dependencies>
    <!-- Dependenciy with its version which is referenced from the
       src/main/assembly-app.xml descriptor. This is the mule app files which gets
       stored in the  docker container which then tested -->
    <dependency>
      <groupId>de.cpoepke.mule.demo</groupId>
      <artifactId>mule-app</artifactId>
      <version>1.0.0-SNAPSHOT</version>
      <type>zip</type>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>local</id>
      <properties>
        <webservice.host>localhost</webservice.host>
        <webservice.port>8080</webservice.port>
      </properties>
    </profile>
    <profile>
      <id>jenkins</id>
      <properties>
        <webservice.host>my.test.system</webservice.host>
        <webservice.port>8080</webservice.port>
      </properties>
    </profile>
  </profiles>

  <build>
    <plugins>
      <plugin>
        <groupId>org.jolokia</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.11.5</version>

        <configuration>
          <dockerHost>${boot2docker.url}</dockerHost>

          <images>
            <!-- Mule app container configuration -->
            <image>
              <name>mule-app</name>
              <alias>mule-app</alias>
              <run>
                <ports>
                  <port>8081:8081</port>
                </ports>
                <links>
                  <link>rest-mock:mock</link>
                </links>
                <log>
                  <prefix>Mule</prefix>
                  <date>ISO8601</date>
                  <color>blue</color>
                </log>
              </run>
              <build>
                <from>cpoepke/muledocker:latest</from>
                <tags>
                  <tag>mule-app</tag>
                </tags>
                <command>/opt/mule-standalone-3.6.1/bin/mule -D-Mbackend.host=${webservice.host} -D-Mbackend.port=${webservice.port}</command>
                <assembly>
                  <mode>dir</mode>
                  <basedir>/</basedir>
                  <descriptor>assembly-app.xml</descriptor>
                </assembly>
              </build>
            </image>
            <!-- Backend mock container configuration -->
            <image>
              <name>rest-mock</name>
              <alias>rest-mock</alias>
              <run>
                <ports>
                  <port>2525:2525</port>
                  <port>8080:8080</port>
                </ports>
                <log>
                  <prefix>Mock</prefix>
                  <date>ISO8601</date>
                  <color>yellow</color>
                </log>
              </run>
              <build>
                <from>cpoepke/mountebank-basis:latest</from>
                <tags>
                  <tag>rest-mock</tag>
                </tags>
                <command>mb --configfile /mb/imposters.ejs --allowInjection</command>
                <assembly>
                  <mode>dir</mode>
                  <basedir>/</basedir>
                  <descriptor>assembly-mock.xml</descriptor>
                </assembly>
              </build>
            </image>
          </images>
        </configuration>

        <!-- Connect start/stop to pre- and
             post-integration-test phase, respectively if you want to start
             your docker containers during integration tests -->
        <executions>
          <execution>
            <id>start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <!-- "build" should be used to create the images with the
                   artefacts -->
              <goal>build</goal>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>